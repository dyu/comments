package comments.user;

import "ds/prk.proto"; // Param* types, loaded from classpath

// ==================================================

option stgs = "_stg_service_all";
option link = UserServices;

@ServiceGroup
@Config(link = AuthFilter)
@Exclude @uint8 enum UserServices {

  ForUser = 3 [ f0 = AuthFilter.NONE ];
}

// ==================================================
// placeholders

@Exclude
@int8
enum Tags { NONE = 1; }

@Exclude
@uint32(bit_flags = true)
enum Role { NONE = 1; }

@Config(link = Role)
@Exclude
@int8
enum AuthFilter { NONE = 1 [ f0 = Role.NONE ]; }

// ==================================================

@Entity(kind = 10, seq = true, custom_ps = true)
message Comment {

  message ByPostId {
    @Min(value = 1)
    required int64 post_id = 1;
    
    @Key(entity = Comment)
    optional bytes last_seen_key = 2;
    
    @Key(entity = Comment)
    optional bytes parent_key = 3;
  }

  service ForUser {
    
    rpc listByPostId(ByPostId) returns (Comment.PList);
    
    @Pub(last_field = true)
    rpc create(Comment) returns (Comment.PList);
  }
  
  // ==================================================

  @Config(link = Tags)
  @Exclude @uint8 enum SI {

    //POST_ID = 224 [gen_kb = true];
    POST_ID__KEY_CHAIN = 225;
  }

  // ==================================================

  optional bytes key = 1 [provided = true, immutable = true];
  optional uint64 ts = 2 [provided = true, immutable = true, datetime = true];

  optional bytes key_chain = 3 [provided = true, immutable = true, default = ""];

  @Length(min = 1, max = 256, msg = "Name is too long")
  required string name = 4 [json_escape = true, immutable = true];

  @Length(min = 1, max = 2048, msg = "The content is too long")
  required string content = 5 [json_escape = true, immutable = true];
  
  @Min(value = 1)
  required uint64 post_id = 6 [immutable = true];
  
  optional int8 depth = 7 [default = 0, provided = true, immutable = true];
  
  @Key(entity = Comment)
  optional bytes parent_key = 8 [default = "", immutable = true];

  message PList { repeated Comment p = 1; optional Comment pub = 2; }
}

